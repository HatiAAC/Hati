generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AccountBanHistory {
  id         Int    @id @default(autoincrement())
  account_id Int
  reason     String
  banned_at  Int
  expired_at Int
  banned_by  Int

  @@map(name: "account_ban_history")
}

model AccountBans {
  account_id Int    @id
  reason     String
  banned_at  Int
  expires_at Int
  banned_by  Int

  @@map(name: "account_bans")
}

model AccountCharacterSale {
  id          Int     @id @default(autoincrement())
  id_account  Int
  id_player   Int
  status      Boolean
  price_type  Boolean
  price_coins Int?
  price_gold  Int?
  dta_insert  String
  dta_valid   String
  dta_sale    String?

  @@map(name: "account_character_sale")
}

model AccountCharacterSaleHistory {

  id             Int      @id
  id_old_account Int?
  id_player      Int?
  id_new_account Int?
  price_type     Boolean?
  price          Int?
  char_id        Int?
  dta_insert     String
  dta_sale       String?
  extornada      Boolean?
  @@map(name: "account_character_sale_history")
}

model AccountViplist {
  account_id  Int     @id
  player_id   Int
  description String
  icon        Boolean
  notify      Boolean

  @@map(name: "account_viplist")
}

model Accounts {
  id                   Int     @id @default(autoincrement())
  name                 String
  password             String
  secret               String?
  type                 Int
  premdays             Int
  coins                Int
  lastday              Int
  email                String
  creation             Int
  jwtVersion           Int
  updatedAt            String
  createdAt            String
  vote                 Int
  key                  String
  email_new            String
  email_new_time       Int
  rlname               String
  location             String
  page_access          Int
  email_code           String
  next_email           Int
  premium_points       Int
  secret_status        Boolean
  create_date          Int
  create_ip            Int
  last_post            Int
  flag                 String
  vip_time             Int
  guild_points         Int
  guild_points_stats   Int
  passed               Int
  block                Int
  refresh              Int
  birth_date           String
  gender               String
  profileName          String
  passwordResetExpires String
  passwordResetToken   String
  avatar               String
  loyalty_points       Int
  authToken            String
  player_sell_bank     Int?
  tournamentBalance    Int
  tokens               Int

  comments         Comments[]
  inventories      Inventories[]
  shop_inventories ShopInventories[]
  shop_orders      ShopOrders[]
  threads          Threads[]
  @@map(name: "accounts")
}

model AccountsOptions {
  account_id Int    @id
  options    String

  @@map(name: "accounts_options")
}

model Announcements {
  id     Int    @id @default(autoincrement())
  title  String
  text   String
  date   String
  author String

  @@map(name: "announcements")
}

model BlessingsHistory {
  id        Int     @id
  player_id Int
  blessing  Boolean
  loss      Boolean
  timestamp Int

  @@map(name: "blessings_history")
}

model Comments {
  id             Int    @id @default(autoincrement())
  post_content   String
  character_name String
  createdAt      String
  updatedAt      String


  threads  Threads  @relation(fields: [thread_id], references: [id])
  accounts Accounts @relation(fields: [account_id], references: [id])

  thread_id  Int
  account_id Int
  @@map(name: "comments")
}

model DailyRewardHistory {
  id          Int     @id @default(autoincrement())
  daystreak   Int
  player_id   Int
  timestamp   Int
  description String?

  @@map(name: "daily_reward_history")
}

model ForumBoard {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  topics      Int
  posts       Int
  createdAt   String
  updatedAt   String

  threads Threads[]
  @@map(name: "forum_board")
}

model GlobalMisc {
  key      Int
  world_id Int @id

  @@map(name: "global_misc")
}

model GlobalStorage {
  key      Int?
  world_id Int  @id
  value    Int?

  @@map(name: "global_storage")
}

model GuildInvites {
  id        Int     @id @default(autoincrement())
  guild_id  Int
  date      String?
  createdAt String
  updatedAt String

  players Players @relation(fields: [player_id], references: [id])
  guilds  Guilds  @relation(fields: [guild_id], references: [id])

  player_id Int
  @@map(name: "guild_invites")
}

model GuildMembership {
  id   Int     @id @default(autoincrement())
  rank Int?
  nick String?


  players Players @relation(fields: [player_id], references: [id])
  guilds  Guilds  @relation(fields: [guild_id], references: [id])

  player_id Int
  guild_id  Int
  @@map(name: "guild_membership")
}

model GuildRanks {
  id    Int    @id @default(autoincrement())
  name  String
  level Int

  guilds Guilds @relation(fields: [guild_id], references: [id])

  guild_id Int
  @@map(name: "guild_ranks")
}

model GuildWars {
  id        Int     @id @default(autoincrement())
  guild1    Int
  guild2    Int
  name1     String
  name2     String
  status    Boolean
  started   Int
  ended     Int
  toend     Int
  buyin     Int
  fraglimit Int

  @@map(name: "guild_wars")
}

model Guilds {
  id                  Int    @id @default(autoincrement())
  name                String
  ownerid             Int
  creationdata        Int
  motd                String
  description         String
  create_ip           Int
  balance             Int
  last_execute_points Int
  logo_gfx_name       String
  createdAt           String
  updatedAt           String

  guild_invites    GuildInvites[]
  guild_membership GuildMembership[]
  guild_ranks      GuildRanks[]
  @@map(name: "guilds")
}

model GuildwarDeaths {
  id        Int @id @default(autoincrement())
  player_id Int
  kills     Int
  deaths    Int
  warid     Int
  time      Int

  @@map(name: "guildwar_deaths")
}

model GuildwarKills {
  id          Int    @id @default(autoincrement())
  killer      String
  target      String
  killerguild Int
  targetguild Int
  warid       Int
  time        Int

  @@map(name: "guildwar_kills")
}

model HouseLists {
  house_id Int    @id
  listid   Int
  list     String

  @@map(name: "house_lists")
}

model Houses {
  id             Int    @id @default(autoincrement())
  owner          Int
  paid           Int
  warnings       Int
  name           String
  rent           Int
  town_id        Int
  bid            Int
  bid_end        Int
  last_bid       Int
  highest_bidder Int
  size           Int
  beds           Int

  @@map(name: "houses")
}

model Inventories {
  id               Int     @id @default(autoincrement())
  itemid           Int
  item_amount      Int?
  item_title       String
  item_description String?
  shop_image       String?
  createdAt        String
  updatedAt        String

  accounts Accounts @relation(fields: [account_id], references: [id])

  account_id Int
  @@map(name: "inventories")
}

model IpBans {
  ip         Int    @id
  reason     String
  banned_at  Int
  expires_at Int
  banned_by  Int

  @@map(name: "ip_bans")
}

model MarketHistory {
  id         Int     @id @default(autoincrement())
  player_id  Int
  sale       Boolean
  itemtype   Int
  amount     Int
  price      Int
  expires_at Int
  inserted   Int
  state      Boolean

  @@map(name: "market_history")
}

model MarketOffers {
  id        Int     @id @default(autoincrement())
  player_id Int
  sale      Boolean
  itemtype  Int
  amount    Int
  created   Int
  anonymous Boolean
  price     Int

  @@map(name: "market_offers")
}

model Newsticker {
  id   Int    @id @default(autoincrement())
  date Int
  text String
  icon String

  @@map(name: "newsticker")
}

model PlayerAutoloot {
  id        Int @id @default(autoincrement())
  player_id Int

  @@map(name: "player_autoloot")
}

model PlayerAutolootPersist {
  player_guid Int  @id
  cont_id     Int?
  item_id     Int?

  @@map(name: "player_autoloot_persist")
}

model PlayerDeaths {
  player_id              Int     @id
  time                   Int
  level                  Int
  killed_by              String
  is_player              Boolean
  mostdamage_by          String
  mostdamage_is_player   Boolean
  unjustified            Boolean
  mostdamage_unjustified Boolean
  createdAt              String
  updatedAt              String

  @@map(name: "player_deaths")
}

model PlayerDepotitems {
  player_id Int @id
  sid       Int
  pid       Int
  itemtype  Int
  count     Int

  @@map(name: "player_depotitems")
}

model PlayerFormerNames {
  id          Int    @id @default(autoincrement())
  player_id   Int
  former_name String
  date        Int

  @@map(name: "player_former_names")
}

model PlayerInboxitems {
  player_id Int @id
  sid       Int
  pid       Int
  itemtype  Int
  count     Int

  @@map(name: "player_inboxitems")
}

model PlayerItems {
  player_id Int @id
  pid       Int
  sid       Int
  itemtype  Int
  count     Int

  @@map(name: "player_items")
}

model PlayerKillers {
  kill_id   Int @id
  player_id Int

  @@map(name: "player_killers")
}

model PlayerKills {
  player_id Int     @id
  time      Int
  target    Int
  unavenged Boolean

  @@map(name: "player_kills")
}

model PlayerMisc {
  player_id Int @id

  @@map(name: "player_misc")
}

model PlayerNamelocks {
  player_id     Int    @id
  reason        String
  namelocked_at Int
  namelocked_by Int

  @@map(name: "player_namelocks")
}

model PlayerPreydata {
  players Players @relation(fields: [player_id], references: [id])

  player_id Int @id
  @@map(name: "player_preydata")
}

model PlayerRewards {
  player_id Int @id
  sid       Int
  pid       Int
  itemtype  Int
  count     Int

  @@map(name: "player_rewards")
}

model PlayerSpells {
  player_id Int    @id
  name      String

  @@map(name: "player_spells")
}

model PlayerStorage {
  player_id Int @id
  key       Int
  value     Int

  @@map(name: "player_storage")
}

model Players {
  id                              Int      @id @default(autoincrement())
  name                            String
  group_id                        Int
  account_id                      Int
  level                           Int
  vocation                        Int
  health                          Int
  healthmax                       Int
  experience                      Int
  lookbody                        Int
  lookfeet                        Int
  lookhead                        Int
  looklegs                        Int
  looktype                        Int
  lookaddons                      Int
  maglevel                        Int
  mana                            Int
  manamax                         Int
  manaspent                       Int
  soul                            Int
  updatedAt                       String
  createdAt                       String
  town_id                         Int
  posx                            Int
  posy                            Int
  posz                            Int
  cap                             Int
  sex                             Int
  lastlogin                       Int
  lastip                          Int
  save                            Boolean
  skull                           Boolean
  skulltime                       Int
  lastlogout                      Int
  blessings                       Boolean
  blessings1                      Boolean
  blessings2                      Boolean
  blessings3                      Boolean
  blessings4                      Boolean
  blessings5                      Boolean
  blessings6                      Boolean
  blessings7                      Boolean
  blessings8                      Boolean
  onlinetime                      Int
  deletion                        Int
  balance                         Int
  bonusrerollcount                Int?
  quick_loot_fallback             Boolean?
  offlinetraining_time            Int
  offlinetraining_skill           Int
  stamina                         Int
  skill_fist                      Int
  skill_fist_tries                Int
  skill_club                      Int
  skill_club_tries                Int
  skill_sword                     Int
  skill_sword_tries               Int
  skill_axe                       Int
  skill_axe_tries                 Int
  skill_dist                      Int
  skill_dist_tries                Int
  skill_shielding                 Int
  skill_shielding_tries           Int
  skill_fishing                   Int
  skill_fishing_tries             Int
  deleted                         Boolean
  description                     String
  comment                         String
  create_ip                       Int
  create_date                     Int
  hide_char                       String
  cast                            Boolean
  skill_critical_hit_chance       Int
  skill_critical_hit_chance_tries Int
  skill_critical_hit_damage       Int
  skill_critical_hit_damage_tries Int
  skill_life_leech_chance         Int
  skill_life_leech_chance_tries   Int
  skill_life_leech_amount         Int
  skill_life_leech_amount_tries   Int
  skill_mana_leech_chance         Int
  skill_mana_leech_chance_tries   Int
  skill_mana_leech_amount         Int
  skill_mana_leech_amount_tries   Int
  skill_criticalhit_chance        Int
  skill_criticalhit_damage        Int
  skill_lifeleech_chance          Int
  skill_lifeleech_amount          Int
  skill_manaleech_chance          Int
  skill_manaleech_amount          Int
  xpboost_stamina                 Int?
  xpboost_value                   Boolean?
  marriage_status                 Int
  hide_skills                     Int?
  hide_set                        Int?
  former                          String
  signature                       String
  marriage_spouse                 Int
  loyalty_ranking                 Boolean
  madphp_signature                Boolean
  madphp_signature_bg             String
  madphp_signature_eqs            Boolean
  madphp_signature_bars           Boolean
  madphp_signature_cache          Int
  lookmount                       Int
  sbw_points                      Int
  InstantRewardTokens             Int?
  bonus_rerolls                   Int
  onlinepoint                     Int?
  onlinepointtrie                 Int?
  hide_char_items                 String
  tokens                          Int

  guild_invites    GuildInvites[]
  guild_membership GuildMembership[]
  player_preydata  PlayerPreydata[]
  @@map(name: "players")
}

model PlayersOnline {
  player_id Int @id

  @@map(name: "players_online")
}

model Sellchar {
  id       Int    @id @default(autoincrement())
  name     String
  vocation Int
  price    Int
  status   String
  oldid    String

  @@map(name: "sellchar")
}

model ServerConfig {
  config String @id
  value  String

  @@map(name: "server_config")
}

model ShopInventories {
  id               Int     @id @default(autoincrement())
  itemid           Int
  item_amount      Int?
  item_title       String
  item_description String?
  item_image       String?
  sended_to        String?
  status           String?
  createdAt        String
  updatedAt        String

  accounts Accounts @relation(fields: [account_id], references: [id])

  account_id Int
  @@map(name: "shop_inventories")
}

model ShopOffers {
  id               Int     @id @default(autoincrement())
  coins            Int
  itemid           Int
  shop_amount      Int?
  shop_type        Int
  shop_title       String
  shop_description String?
  shop_image       String?

  @@map(name: "shop_offers")
}

model ShopOrders {
  id                Int     @id @default(autoincrement())
  transaction_id    Int
  transaction_title String
  payment_method    String
  address           String
  paid_value        String
  status            String?
  createdAt         String
  updatedAt         String

  accounts Accounts @relation(fields: [account_id], references: [id])

  account_id Int
  @@map(name: "shop_orders")
}

model StoreHistory {
  accountid   Int     @id
  mode        Boolean
  amount      Int
  coinMode    Boolean
  description String?
  cust        Int
  time        Int?

  @@map(name: "store_history")
}

model Threads {
  id             Int    @id @default(autoincrement())
  title          String
  character_name String
  body_text      String
  views          String
  createdAt      String
  updatedAt      String



  forum_board ForumBoard @relation(fields: [board_id], references: [id])
  accounts    Accounts   @relation(fields: [account_id], references: [id])

  board_id   Int
  account_id Int

  comments Comments[]
  @@map(name: "threads")
}

model TileStore {
  house_id Int   @id
  data     Bytes

  @@map(name: "tile_store")
}
